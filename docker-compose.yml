version: "3.9"

services:
  # ==========================================
  # Base de datos
  # ==========================================
  db:
    image: postgres:17
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==========================================
  # Micro-Servicios
  # ==========================================
  catalogo_api:
    build:
      context: ./catalogo_api
      dockerfile: Dockerfile
    container_name: catalogo_api
    image: catalogo_api:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
    ports:
      - "8081:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  pedidos_api:
    build:
      context: ./pedidos_api
      dockerfile: Dockerfile
    container_name: pedidos_api
    image: pedidos_api:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
    ports:
      - "8082:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  pagos_api:
    build:
      context: ./pagos_api
      dockerfile: Dockerfile
    container_name: pagos_api
    image: pagos_api:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
    ports:
      - "8083:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  inventario_api:
    build:
      context: ./inventario_api
      dockerfile: Dockerfile
    container_name: inventario_api
    image: inventario_api:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
    ports:
      - "8084:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  envios_api:
    build:
      context: ./envios_api
      dockerfile: Dockerfile
    container_name: envios_api
    image: envios_api:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
    ports:
      - "8085:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  notificaciones_api:
    build:
      context: ./notificaciones_api
      dockerfile: Dockerfile
    container_name: notificaciones_api
    image: notificaciones_api:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
    ports:
      - "8086:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  # ==========================================
  # Api Gateway
  # ==========================================    
  gateway_api:
    build:
      context: ./gateway_api
      dockerfile: Dockerfile
    container_name: gateway_api
    image: gateway_api:latest
    depends_on:
      catalogo_api:
        condition: service_healthy
      pedidos_api:
        condition: service_healthy
      pagos_api:
        condition: service_healthy
      inventario_api:
        condition: service_healthy
      envios_api:
        condition: service_healthy
      notificaciones_api:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
      
  # ==========================================
  # Swagger API
  # ========================================== 
      
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger-ui
    ports:
      - "8089:8080"
    environment:
      SWAGGER_JSON: /openapi/microservices.yml
    volumes:
      - ./swagger/microservices.yml:/openapi/microservices.yml
    depends_on:
      gateway_api:
        condition: service_healthy

# ===========================
# Red compartida
# ===========================
networks:
  backend:
    driver: bridge